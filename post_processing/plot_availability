
import model_config as cfg
import numpy as np
import pandas 
import matplotlib.pyplot as plt
from pathlib import Path
import sys
import campo 
import os 
import lue.data_model as ldm 

post_processing = Path.cwd()
sys.path.append(f"{post_processing}")
up_dir = post_processing.parent

input_d = up_dir / 'input'
output_d = up_dir / 'output'
map_nc = input_d / 'maas_data'/'new_fm_map.nc'
loc_CSV =input_d / 'barbel_coords.csv'
fish_env = output_d / 'fish_environment.lue'
nrbarbel = cfg.nr_barbel
timesteps = cfg.timesteps
resolution = cfg.spatial_resolution
dyn_timevector = np.arange (0,int(timesteps),1) # with one step less, 0 is the first step in the dynamic (and thus 1 in all other references)
dataset = ldm.open_dataset(f"{fish_env}")
 # ok, same vector, but in this one 0 actually means t=0 (since values are 0), but last timestep is not written to csv 
timevector = np.arange (0,(int(timesteps)+1),1)
os.chdir(output_d) # change it to make sure outputs are stored correctly 

total_spawnarea = np.zeros (timesteps+1)
spawn_df = campo.dataframe.select(dataset.water, property_names=['spawning_grounds'])
for t_dyn in dyn_timevector: 
    spawnraster = spawn_df["water"]["area"]['spawning_grounds'][0][t_dyn] 
    total_spawnarea [t_dyn+1] = resolution**2*spawnraster.sum()    

available_area_frame = pandas.read_csv(f'available_area_spawning_area.csv')
travel_distances = pandas.read_csv (f'propdist_distance_to_spawn.csv')

#%%
available_area = available_area_frame.to_numpy()
barbel_spawning_possibility = np.sum (available_area > 0, axis=1) # the number of barbels with access to a spawning area
percentage_barbelAcces = barbel_spawning_possibility/nrbarbel*100

for t_agent in dyn_timevector:
    plt.figure()
    plt.hist(available_area [t_agent,:], color='lightgreen', bins=15)
    plt.xlabel ('Available spawning area ($m^2$)')
    plt.ylabel ('Number of barbel')
    plt.title (f'Timestep {t_agent+1}')
    plt.show()

print (len(percentage_barbelAcces))
print (len(timevector))
print (len(total_spawnarea))
percentage_barbelAcces= np.concatenate(([0],percentage_barbelAcces)) # should have a number but strangely enough no output
## showing total amount of available area and the accessible area
fig, ax1 = plt.subplots()

color1 = "#440154FF"
ax1.bar(timevector*12, percentage_barbelAcces, color=color1, width = 0.5)
ax1.set_ylabel('Barbel with access to spawning area (%)', color=color1)
ax1.tick_params(axis='y', labelcolor=color1)
ax1.set_xlabel ('Time (hours)')

ax2 = ax1.twinx()
color2 = 'olive'
ax2.plot (timevector*12,total_spawnarea,  marker ='o', markerfacecolor =color2 , markeredgecolor=color2, linestyle ='none', markersize = 8)
ax2.set_ylabel ('Spawning area ($m^2$)', color=color2)
ax2.tick_params(axis='y', labelcolor=color2)
plt.title ('Spawning area availability in Common Meuse over time')
plt.show()

